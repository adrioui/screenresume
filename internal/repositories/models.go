// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package repositories

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgtype"
)

type ApplicationStage string

const (
	ApplicationStageApplied   ApplicationStage = "applied"
	ApplicationStageScreening ApplicationStage = "screening"
	ApplicationStageInterview ApplicationStage = "interview"
	ApplicationStageOffer     ApplicationStage = "offer"
	ApplicationStageRejected  ApplicationStage = "rejected"
)

func (e *ApplicationStage) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ApplicationStage(s)
	case string:
		*e = ApplicationStage(s)
	default:
		return fmt.Errorf("unsupported scan type for ApplicationStage: %T", src)
	}
	return nil
}

type NullApplicationStage struct {
	ApplicationStage ApplicationStage `json:"application_stage"`
	Valid            bool             `json:"valid"` // Valid is true if ApplicationStage is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullApplicationStage) Scan(value interface{}) error {
	if value == nil {
		ns.ApplicationStage, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ApplicationStage.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullApplicationStage) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ApplicationStage), nil
}

type ExperienceLevel string

const (
	ExperienceLevelEntry  ExperienceLevel = "entry"
	ExperienceLevelMid    ExperienceLevel = "mid"
	ExperienceLevelSenior ExperienceLevel = "senior"
	ExperienceLevelLead   ExperienceLevel = "lead"
)

func (e *ExperienceLevel) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ExperienceLevel(s)
	case string:
		*e = ExperienceLevel(s)
	default:
		return fmt.Errorf("unsupported scan type for ExperienceLevel: %T", src)
	}
	return nil
}

type NullExperienceLevel struct {
	ExperienceLevel ExperienceLevel `json:"experience_level"`
	Valid           bool            `json:"valid"` // Valid is true if ExperienceLevel is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullExperienceLevel) Scan(value interface{}) error {
	if value == nil {
		ns.ExperienceLevel, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ExperienceLevel.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullExperienceLevel) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ExperienceLevel), nil
}

type Application struct {
	ID          uuid.UUID        `json:"id"`
	CandidateID uuid.UUID        `json:"candidate_id"`
	JobRoleID   uuid.UUID        `json:"job_role_id"`
	Stage       ApplicationStage `json:"stage"`
	Score       pgtype.Numeric   `json:"score"`
	AppliedAt   time.Time        `json:"applied_at"`
	LastUpdated time.Time        `json:"last_updated"`
}

type Candidate struct {
	ID        uuid.UUID `json:"id"`
	FullName  string    `json:"full_name"`
	Email     string    `json:"email"`
	Phone     string    `json:"phone"`
	FileID    uuid.UUID `json:"file_id"`
	Status    string    `json:"status"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type CandidateSkill struct {
	CandidateID     uuid.UUID      `json:"candidate_id"`
	SkillID         uuid.UUID      `json:"skill_id"`
	YearsExperience pgtype.Numeric `json:"years_experience"`
	LastUsed        sql.NullTime   `json:"last_used"`
}

type Department struct {
	ID        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type File struct {
	ID        uuid.UUID    `json:"id"`
	Path      string       `json:"path"`
	FileType  string       `json:"file_type"`
	Checksum  string       `json:"checksum"`
	CreatedAt time.Time    `json:"created_at"`
	UpdatedAt time.Time    `json:"updated_at"`
	DeletedAt sql.NullTime `json:"deleted_at"`
}

type JobRole struct {
	ID           uuid.UUID       `json:"id"`
	Title        string          `json:"title"`
	DepartmentID uuid.UUID       `json:"department_id"`
	Level        ExperienceLevel `json:"level"`
	SalaryRange  string          `json:"salary_range"`
	Location     string          `json:"location"`
	IsActive     bool            `json:"is_active"`
	CreatedAt    time.Time       `json:"created_at"`
	UpdatedAt    time.Time       `json:"updated_at"`
}

type JobRoleRequirement struct {
	JobRoleID          uuid.UUID      `json:"job_role_id"`
	SkillID            uuid.UUID      `json:"skill_id"`
	Required           bool           `json:"required"`
	MinExperienceYears pgtype.Numeric `json:"min_experience_years"`
	Importance         int32          `json:"importance"`
}

type ScreeningCriterium struct {
	ID                uuid.UUID   `json:"id"`
	ScreeningResultID uuid.UUID   `json:"screening_result_id"`
	CriteriaText      string      `json:"criteria_text"`
	Decision          bool        `json:"decision"`
	Reasoning         string      `json:"reasoning"`
	MatchedSkills     []uuid.UUID `json:"matched_skills"`
	MissingSkills     []uuid.UUID `json:"missing_skills"`
}

type ScreeningResult struct {
	ID            uuid.UUID    `json:"id"`
	ApplicationID uuid.UUID    `json:"application_id"`
	ModelVersion  string       `json:"model_version"`
	RawResponse   pgtype.JSONB `json:"raw_response"`
	ProcessedAt   time.Time    `json:"processed_at"`
}

type Skill struct {
	ID        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	Category  string    `json:"category"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

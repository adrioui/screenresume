// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: files.sql

package repositories

import (
	"context"

	"github.com/google/uuid"
)

const createFile = `-- name: CreateFile :one
insert into files (
  id, path, file_type, checksum
) values (
  uuid_generate_v4(), $1, $2, $3
)
RETURNING id, path, file_type, checksum, created_at, updated_at, deleted_at
`

type CreateFileParams struct {
	Path     string `json:"path"`
	FileType string `json:"file_type"`
	Checksum string `json:"checksum"`
}

func (q *Queries) CreateFile(ctx context.Context, arg CreateFileParams) (File, error) {
	row := q.db.QueryRow(ctx, createFile, arg.Path, arg.FileType, arg.Checksum)
	var i File
	err := row.Scan(
		&i.ID,
		&i.Path,
		&i.FileType,
		&i.Checksum,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteFile = `-- name: DeleteFile :exec
delete from files
where id = $1
`

func (q *Queries) DeleteFile(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteFile, id)
	return err
}

const getFile = `-- name: GetFile :one
select id, path, file_type, checksum, created_at, updated_at, deleted_at
from files
where id = $1
limit 1
`

func (q *Queries) GetFile(ctx context.Context, id uuid.UUID) (File, error) {
	row := q.db.QueryRow(ctx, getFile, id)
	var i File
	err := row.Scan(
		&i.ID,
		&i.Path,
		&i.FileType,
		&i.Checksum,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getFilesByPath = `-- name: GetFilesByPath :many
select id, path, file_type, checksum, created_at, updated_at, deleted_at
from files
where path = $1
order by created_at
`

func (q *Queries) GetFilesByPath(ctx context.Context, path string) ([]File, error) {
	rows, err := q.db.Query(ctx, getFilesByPath, path)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []File{}
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.ID,
			&i.Path,
			&i.FileType,
			&i.Checksum,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFiles = `-- name: ListFiles :many
select id, path, file_type, checksum, created_at, updated_at, deleted_at
from files
order by created_at
`

func (q *Queries) ListFiles(ctx context.Context) ([]File, error) {
	rows, err := q.db.Query(ctx, listFiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []File{}
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.ID,
			&i.Path,
			&i.FileType,
			&i.Checksum,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFile = `-- name: UpdateFile :exec
update files
  set path = $2,
      file_type = $3,
      checksum = $4
where id = $1
`

type UpdateFileParams struct {
	ID       uuid.UUID `json:"id"`
	Path     string    `json:"path"`
	FileType string    `json:"file_type"`
	Checksum string    `json:"checksum"`
}

func (q *Queries) UpdateFile(ctx context.Context, arg UpdateFileParams) error {
	_, err := q.db.Exec(ctx, updateFile,
		arg.ID,
		arg.Path,
		arg.FileType,
		arg.Checksum,
	)
	return err
}

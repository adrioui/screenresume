// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: candidates.sql

package repositories

import (
	"context"

	"github.com/google/uuid"
)

const createCandidate = `-- name: CreateCandidate :one
INSERT INTO candidates (
    id, full_name, email, phone, file_id, status
) VALUES (
    uuid_generate_v4(), $1, $2, $3, $4, $5
)
RETURNING id, full_name, email, phone, file_id, status, created_at, updated_at
`

type CreateCandidateParams struct {
	FullName string    `json:"full_name"`
	Email    string    `json:"email"`
	Phone    string    `json:"phone"`
	FileID   uuid.UUID `json:"file_id"`
	Status   string    `json:"status"`
}

func (q *Queries) CreateCandidate(ctx context.Context, arg CreateCandidateParams) (Candidate, error) {
	row := q.db.QueryRow(ctx, createCandidate,
		arg.FullName,
		arg.Email,
		arg.Phone,
		arg.FileID,
		arg.Status,
	)
	var i Candidate
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.Phone,
		&i.FileID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCandidate = `-- name: DeleteCandidate :exec
delete from candidates
where id = $1
`

func (q *Queries) DeleteCandidate(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCandidate, id)
	return err
}

const getCandidate = `-- name: GetCandidate :one
select id, full_name, email, phone, file_id, status, created_at, updated_at
from candidates
where id = $1
limit 1
`

func (q *Queries) GetCandidate(ctx context.Context, id uuid.UUID) (Candidate, error) {
	row := q.db.QueryRow(ctx, getCandidate, id)
	var i Candidate
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.Phone,
		&i.FileID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCandidates = `-- name: ListCandidates :many
select id, full_name, email, phone, file_id, status, created_at, updated_at
from candidates
order by created_at desc
`

func (q *Queries) ListCandidates(ctx context.Context) ([]Candidate, error) {
	rows, err := q.db.Query(ctx, listCandidates)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Candidate{}
	for rows.Next() {
		var i Candidate
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.Email,
			&i.Phone,
			&i.FileID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCandidate = `-- name: UpdateCandidate :exec
UPDATE candidates
SET full_name = $2,
    email = $3,
    phone = $4,
    file_id = $5,
    status = $6
WHERE id = $1
`

type UpdateCandidateParams struct {
	ID       uuid.UUID `json:"id"`
	FullName string    `json:"full_name"`
	Email    string    `json:"email"`
	Phone    string    `json:"phone"`
	FileID   uuid.UUID `json:"file_id"`
	Status   string    `json:"status"`
}

func (q *Queries) UpdateCandidate(ctx context.Context, arg UpdateCandidateParams) error {
	_, err := q.db.Exec(ctx, updateCandidate,
		arg.ID,
		arg.FullName,
		arg.Email,
		arg.Phone,
		arg.FileID,
		arg.Status,
	)
	return err
}

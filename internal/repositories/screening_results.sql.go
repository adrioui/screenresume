// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: screening_results.sql

package repositories

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgtype"
)

const createScreeningResults = `-- name: CreateScreeningResults :one
INSERT INTO screening_results (
    id, application_id, model_version, raw_response, processed_at
) VALUES (
    uuid_generate_v4(), $1, $2, $3, now()
)
RETURNING id, application_id, model_version, raw_response, processed_at
`

type CreateScreeningResultsParams struct {
	ApplicationID uuid.UUID    `json:"application_id"`
	ModelVersion  string       `json:"model_version"`
	RawResponse   pgtype.JSONB `json:"raw_response"`
}

func (q *Queries) CreateScreeningResults(ctx context.Context, arg CreateScreeningResultsParams) (ScreeningResult, error) {
	row := q.db.QueryRow(ctx, createScreeningResults, arg.ApplicationID, arg.ModelVersion, arg.RawResponse)
	var i ScreeningResult
	err := row.Scan(
		&i.ID,
		&i.ApplicationID,
		&i.ModelVersion,
		&i.RawResponse,
		&i.ProcessedAt,
	)
	return i, err
}

const getScreeningResults = `-- name: GetScreeningResults :one
select id, application_id, model_version, raw_response, processed_at
from screening_results
where id = $1
limit 1
`

func (q *Queries) GetScreeningResults(ctx context.Context, id uuid.UUID) (ScreeningResult, error) {
	row := q.db.QueryRow(ctx, getScreeningResults, id)
	var i ScreeningResult
	err := row.Scan(
		&i.ID,
		&i.ApplicationID,
		&i.ModelVersion,
		&i.RawResponse,
		&i.ProcessedAt,
	)
	return i, err
}

const listScreeningResults = `-- name: ListScreeningResults :many
select id, application_id, model_version, raw_response, processed_at
from screening_results
order by id
`

func (q *Queries) ListScreeningResults(ctx context.Context) ([]ScreeningResult, error) {
	rows, err := q.db.Query(ctx, listScreeningResults)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ScreeningResult{}
	for rows.Next() {
		var i ScreeningResult
		if err := rows.Scan(
			&i.ID,
			&i.ApplicationID,
			&i.ModelVersion,
			&i.RawResponse,
			&i.ProcessedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

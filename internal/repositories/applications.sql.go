// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: applications.sql

package repositories

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgtype"
)

const createApplication = `-- name: CreateApplication :one
INSERT INTO applications (
    id, candidate_id, job_role_id, stage, score, applied_at, last_updated
) VALUES (
    uuid_generate_v4(),  $1, $2, $3, $4, now(), now()
)
RETURNING id, candidate_id, job_role_id, stage, score, applied_at, last_updated
`

type CreateApplicationParams struct {
	CandidateID uuid.UUID        `json:"candidate_id"`
	JobRoleID   uuid.UUID        `json:"job_role_id"`
	Stage       ApplicationStage `json:"stage"`
	Score       pgtype.Numeric   `json:"score"`
}

func (q *Queries) CreateApplication(ctx context.Context, arg CreateApplicationParams) (Application, error) {
	row := q.db.QueryRow(ctx, createApplication,
		arg.CandidateID,
		arg.JobRoleID,
		arg.Stage,
		arg.Score,
	)
	var i Application
	err := row.Scan(
		&i.ID,
		&i.CandidateID,
		&i.JobRoleID,
		&i.Stage,
		&i.Score,
		&i.AppliedAt,
		&i.LastUpdated,
	)
	return i, err
}

const deleteApplication = `-- name: DeleteApplication :exec
delete from applications
where id = $1
`

func (q *Queries) DeleteApplication(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteApplication, id)
	return err
}

const getApplication = `-- name: GetApplication :one
select id, candidate_id, job_role_id, stage, score, applied_at, last_updated
from applications
where id = $1
limit 1
`

func (q *Queries) GetApplication(ctx context.Context, id uuid.UUID) (Application, error) {
	row := q.db.QueryRow(ctx, getApplication, id)
	var i Application
	err := row.Scan(
		&i.ID,
		&i.CandidateID,
		&i.JobRoleID,
		&i.Stage,
		&i.Score,
		&i.AppliedAt,
		&i.LastUpdated,
	)
	return i, err
}

const getApplicationByFileID = `-- name: GetApplicationByFileID :one
SELECT a.id
FROM applications a
JOIN candidates c ON a.candidate_id = c.candidate_id
JOIN files f ON c.file_id = f.id
WHERE f.id = $1
`

func (q *Queries) GetApplicationByFileID(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, getApplicationByFileID, id)
	err := row.Scan(&id)
	return id, err
}

const listApplications = `-- name: ListApplications :many
select id, candidate_id, job_role_id, stage, score, applied_at, last_updated
from applications
`

func (q *Queries) ListApplications(ctx context.Context) ([]Application, error) {
	rows, err := q.db.Query(ctx, listApplications)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Application{}
	for rows.Next() {
		var i Application
		if err := rows.Scan(
			&i.ID,
			&i.CandidateID,
			&i.JobRoleID,
			&i.Stage,
			&i.Score,
			&i.AppliedAt,
			&i.LastUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateApplication = `-- name: UpdateApplication :exec
UPDATE applications
SET candidate_id = $2,
    job_role_id = $3,
    stage = $4,
    score = $5,
    last_updated = now()
WHERE id = $1
`

type UpdateApplicationParams struct {
	ID          uuid.UUID        `json:"id"`
	CandidateID uuid.UUID        `json:"candidate_id"`
	JobRoleID   uuid.UUID        `json:"job_role_id"`
	Stage       ApplicationStage `json:"stage"`
	Score       pgtype.Numeric   `json:"score"`
}

func (q *Queries) UpdateApplication(ctx context.Context, arg UpdateApplicationParams) error {
	_, err := q.db.Exec(ctx, updateApplication,
		arg.ID,
		arg.CandidateID,
		arg.JobRoleID,
		arg.Stage,
		arg.Score,
	)
	return err
}

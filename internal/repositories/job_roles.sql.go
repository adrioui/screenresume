// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: job_roles.sql

package repositories

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createJobRole = `-- name: CreateJobRole :one
INSERT INTO job_roles (
    id, title, department_id, level, salary_range, location, is_active, created_at, updated_at
) VALUES (
    uuid_generate_v4(), $1, $2, $3, $4, $5, $6, now(), now()
)
RETURNING id, title, department_id, level, salary_range, location, is_active, created_at, updated_at
`

type CreateJobRoleParams struct {
	Title        string          `json:"title"`
	DepartmentID uuid.UUID       `json:"department_id"`
	Level        ExperienceLevel `json:"level"`
	SalaryRange  pgtype.Text     `json:"salary_range"`
	Location     pgtype.Text     `json:"location"`
	IsActive     bool            `json:"is_active"`
}

func (q *Queries) CreateJobRole(ctx context.Context, arg CreateJobRoleParams) (JobRole, error) {
	row := q.db.QueryRow(ctx, createJobRole,
		arg.Title,
		arg.DepartmentID,
		arg.Level,
		arg.SalaryRange,
		arg.Location,
		arg.IsActive,
	)
	var i JobRole
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.DepartmentID,
		&i.Level,
		&i.SalaryRange,
		&i.Location,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteJobRole = `-- name: DeleteJobRole :exec
delete from job_roles
where id = $1
`

func (q *Queries) DeleteJobRole(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteJobRole, id)
	return err
}

const getJobRole = `-- name: GetJobRole :one
select id, title, department_id, level, salary_range, location, is_active, created_at, updated_at
from job_roles
where id = $1
limit 1
`

func (q *Queries) GetJobRole(ctx context.Context, id uuid.UUID) (JobRole, error) {
	row := q.db.QueryRow(ctx, getJobRole, id)
	var i JobRole
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.DepartmentID,
		&i.Level,
		&i.SalaryRange,
		&i.Location,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listJobRoles = `-- name: ListJobRoles :many
select id, title, department_id, level, salary_range, location, is_active, created_at, updated_at
from job_roles
order by created_at desc
`

func (q *Queries) ListJobRoles(ctx context.Context) ([]JobRole, error) {
	rows, err := q.db.Query(ctx, listJobRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []JobRole{}
	for rows.Next() {
		var i JobRole
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.DepartmentID,
			&i.Level,
			&i.SalaryRange,
			&i.Location,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateJobRole = `-- name: UpdateJobRole :exec
UPDATE job_roles
SET title = $2,
    department_id = $3,
    level = $4,
    salary_range = $5,
    location = $6,
    is_active = $7,
    updated_at = now()
WHERE id = $1
`

type UpdateJobRoleParams struct {
	ID           uuid.UUID       `json:"id"`
	Title        string          `json:"title"`
	DepartmentID uuid.UUID       `json:"department_id"`
	Level        ExperienceLevel `json:"level"`
	SalaryRange  pgtype.Text     `json:"salary_range"`
	Location     pgtype.Text     `json:"location"`
	IsActive     bool            `json:"is_active"`
}

func (q *Queries) UpdateJobRole(ctx context.Context, arg UpdateJobRoleParams) error {
	_, err := q.db.Exec(ctx, updateJobRole,
		arg.ID,
		arg.Title,
		arg.DepartmentID,
		arg.Level,
		arg.SalaryRange,
		arg.Location,
		arg.IsActive,
	)
	return err
}

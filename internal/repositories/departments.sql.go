// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: departments.sql

package repositories

import (
	"context"

	"github.com/google/uuid"
)

const createDepartment = `-- name: CreateDepartment :one
insert into departments (
  id, name
) values (
  uuid_generate_v4(), $1
)
RETURNING id, name, created_at, updated_at
`

func (q *Queries) CreateDepartment(ctx context.Context, name string) (Department, error) {
	row := q.db.QueryRow(ctx, createDepartment, name)
	var i Department
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteDepartment = `-- name: DeleteDepartment :exec
delete from departments
where id = $1
`

func (q *Queries) DeleteDepartment(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteDepartment, id)
	return err
}

const getDepartment = `-- name: GetDepartment :one
select id, name, created_at, updated_at
from departments
where id = $1
limit 1
`

func (q *Queries) GetDepartment(ctx context.Context, id uuid.UUID) (Department, error) {
	row := q.db.QueryRow(ctx, getDepartment, id)
	var i Department
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listDepartments = `-- name: ListDepartments :many
select id, name, created_at, updated_at
from departments
order by created_at
`

func (q *Queries) ListDepartments(ctx context.Context) ([]Department, error) {
	rows, err := q.db.Query(ctx, listDepartments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Department{}
	for rows.Next() {
		var i Department
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDepartment = `-- name: UpdateDepartment :exec
update departments
  set  name = $2
where id = $1
`

type UpdateDepartmentParams struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

func (q *Queries) UpdateDepartment(ctx context.Context, arg UpdateDepartmentParams) error {
	_, err := q.db.Exec(ctx, updateDepartment, arg.ID, arg.Name)
	return err
}

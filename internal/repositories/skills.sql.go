// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: skills.sql

package repositories

import (
	"context"

	"github.com/google/uuid"
)

const createSkill = `-- name: CreateSkill :one
insert into skills (
  id, name, category
) values (
  uuid_generate_v4(), $1, $2
)
RETURNING id, name, category, created_at, updated_at
`

type CreateSkillParams struct {
	Name     string `json:"name"`
	Category string `json:"category"`
}

func (q *Queries) CreateSkill(ctx context.Context, arg CreateSkillParams) (Skill, error) {
	row := q.db.QueryRow(ctx, createSkill, arg.Name, arg.Category)
	var i Skill
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Category,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSkill = `-- name: DeleteSkill :exec
delete from skills
where id = $1
`

func (q *Queries) DeleteSkill(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSkill, id)
	return err
}

const getSkill = `-- name: GetSkill :one
select id, name, category, created_at, updated_at
from skills
where id = $1
limit 1
`

func (q *Queries) GetSkill(ctx context.Context, id uuid.UUID) (Skill, error) {
	row := q.db.QueryRow(ctx, getSkill, id)
	var i Skill
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Category,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSkillByName = `-- name: GetSkillByName :one
select id, name, category, created_at, updated_at
from skills
where name = $1
limit 1
`

func (q *Queries) GetSkillByName(ctx context.Context, name string) (Skill, error) {
	row := q.db.QueryRow(ctx, getSkillByName, name)
	var i Skill
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Category,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listSkills = `-- name: ListSkills :many
select id, name, category, created_at, updated_at
from skills
order by created_at
`

func (q *Queries) ListSkills(ctx context.Context) ([]Skill, error) {
	rows, err := q.db.Query(ctx, listSkills)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Skill{}
	for rows.Next() {
		var i Skill
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Category,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSkill = `-- name: UpdateSkill :exec
update skills
  set name = $2,
      category = $3
where id = $1
`

type UpdateSkillParams struct {
	ID       uuid.UUID `json:"id"`
	Name     string    `json:"name"`
	Category string    `json:"category"`
}

func (q *Queries) UpdateSkill(ctx context.Context, arg UpdateSkillParams) error {
	_, err := q.db.Exec(ctx, updateSkill, arg.ID, arg.Name, arg.Category)
	return err
}

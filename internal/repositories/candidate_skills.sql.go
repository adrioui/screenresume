// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: candidate_skills.sql

package repositories

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/jackc/pgtype"
)

const createCandidateSkills = `-- name: CreateCandidateSkills :one
INSERT INTO candidate_skills (
    candidate_id, skill_id, years_experience, last_used
) VALUES (
    $1, $2, $3, $4
)
RETURNING candidate_id, skill_id, years_experience, last_used
`

type CreateCandidateSkillsParams struct {
	CandidateID     uuid.UUID      `json:"candidate_id"`
	SkillID         uuid.UUID      `json:"skill_id"`
	YearsExperience pgtype.Numeric `json:"years_experience"`
	LastUsed        sql.NullTime   `json:"last_used"`
}

func (q *Queries) CreateCandidateSkills(ctx context.Context, arg CreateCandidateSkillsParams) (CandidateSkill, error) {
	row := q.db.QueryRow(ctx, createCandidateSkills,
		arg.CandidateID,
		arg.SkillID,
		arg.YearsExperience,
		arg.LastUsed,
	)
	var i CandidateSkill
	err := row.Scan(
		&i.CandidateID,
		&i.SkillID,
		&i.YearsExperience,
		&i.LastUsed,
	)
	return i, err
}

const deleteCandidateSkills = `-- name: DeleteCandidateSkills :exec
delete from candidate_skills
where candidate_id = $1 and skill_id = $2
`

type DeleteCandidateSkillsParams struct {
	CandidateID uuid.UUID `json:"candidate_id"`
	SkillID     uuid.UUID `json:"skill_id"`
}

func (q *Queries) DeleteCandidateSkills(ctx context.Context, arg DeleteCandidateSkillsParams) error {
	_, err := q.db.Exec(ctx, deleteCandidateSkills, arg.CandidateID, arg.SkillID)
	return err
}

const getCandidateSkills = `-- name: GetCandidateSkills :one
select candidate_id, skill_id, years_experience, last_used
from candidate_skills
where candidate_id = $1 and skill_id = $2
limit 1
`

type GetCandidateSkillsParams struct {
	CandidateID uuid.UUID `json:"candidate_id"`
	SkillID     uuid.UUID `json:"skill_id"`
}

func (q *Queries) GetCandidateSkills(ctx context.Context, arg GetCandidateSkillsParams) (CandidateSkill, error) {
	row := q.db.QueryRow(ctx, getCandidateSkills, arg.CandidateID, arg.SkillID)
	var i CandidateSkill
	err := row.Scan(
		&i.CandidateID,
		&i.SkillID,
		&i.YearsExperience,
		&i.LastUsed,
	)
	return i, err
}

const listCandidateSkills = `-- name: ListCandidateSkills :many
select candidate_id, skill_id, years_experience, last_used
from candidate_skills
order by candidate_id, skill_id
`

func (q *Queries) ListCandidateSkills(ctx context.Context) ([]CandidateSkill, error) {
	rows, err := q.db.Query(ctx, listCandidateSkills)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CandidateSkill{}
	for rows.Next() {
		var i CandidateSkill
		if err := rows.Scan(
			&i.CandidateID,
			&i.SkillID,
			&i.YearsExperience,
			&i.LastUsed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCandidateSkills = `-- name: UpdateCandidateSkills :exec
UPDATE candidate_skills
SET 
    years_experience = $3, 
    last_used = $4
WHERE candidate_id = $1 AND skill_id = $2
`

type UpdateCandidateSkillsParams struct {
	CandidateID     uuid.UUID      `json:"candidate_id"`
	SkillID         uuid.UUID      `json:"skill_id"`
	YearsExperience pgtype.Numeric `json:"years_experience"`
	LastUsed        sql.NullTime   `json:"last_used"`
}

func (q *Queries) UpdateCandidateSkills(ctx context.Context, arg UpdateCandidateSkillsParams) error {
	_, err := q.db.Exec(ctx, updateCandidateSkills,
		arg.CandidateID,
		arg.SkillID,
		arg.YearsExperience,
		arg.LastUsed,
	)
	return err
}
